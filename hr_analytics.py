# -*- coding: utf-8 -*-
"""HR_Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e8SRfYwb5NfD_zw_eWZyjGXFYO7G6n5e
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings ('ignore')

train=pd.read_csv('train_hr.csv')
test=pd.read_csv('test_hr.csv')
train['source']='train'
test['source']='test'
df=pd.concat([train,test],ignore_index=True)

df.describe()
df.info()
df.isnull().sum()

df['region'].value_counts().sort_index(ascending=True)

df['education'].value_counts()

df.apply(lambda x: len(x.unique()))

edumode=df.groupby('department')['education'].apply(lambda x:x.mode()[0])
miss_bool = df['education'].isnull()
def impute_education(x):
    return edumode.get(x, np.nan)
df.loc[miss_bool, 'education'] = df.loc[miss_bool, 'department'].apply(impute_education)

df.isnull().sum()

df[df.length_of_service==1].isnull().sum()

#kpi_met = train[train['KPIs_met >80%'] == 1]

# Count how many of them were promoted vs not
df[df['is_promoted']==1].value_counts().sum()

# Rule 1: High performers → KPI met, high training score
df.loc[
    (df['previous_year_rating'].isna()) &
    (df['KPIs_met >80%'] == 1) &
    (df['avg_training_score'] >= 80),
    'previous_year_rating'
] = 5

# Rule 2: Moderate performers → KPI met, mid training score
df.loc[
    (df['previous_year_rating'].isna()) &
    (df['KPIs_met >80%'] == 1) &
    (df['avg_training_score'] < 80),
    'previous_year_rating'
] = 4

# Rule 3: Low performers → KPI not met, low training score
df.loc[
    (df['previous_year_rating'].isna()) &
    (df['KPIs_met >80%'] == 0) &
    (df['avg_training_score'] < 60),
    'previous_year_rating'
] = 3

# Rule 4: Default fallback → use median
df['previous_year_rating'] = df['previous_year_rating'].fillna(df['previous_year_rating'].median())

df.isnull().sum()

train_only = df[df['is_promoted'].notna()]

# Ensure 'is_promoted' is numeric
train_only['is_promoted'] = train_only['is_promoted'].astype(float)

numeric_cols = train_only.select_dtypes(include='number')

# Correlation with target
correlation_with_target = numeric_cols.corr()['is_promoted'].sort_values(ascending=False)

print(correlation_with_target)

df.drop(['employee_id'],axis=1,inplace=True)
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
for col in ['department','region','education','gender','recruitment_channel']:
    df[col] = le.fit_transform(df[col])

train_hr = df.loc[df['source']=="train"]
test_hr = df.loc[df['source']=="test"]

#Drop unnecessary columns:
test_hr.drop(['is_promoted','source'],axis=1,inplace=True)
train_hr.drop(['source'],axis=1,inplace=True)

#Export files as modified versions:
train_hr.to_csv("train_modified.csv",index=False)
test_hr.to_csv("test_modified.csv",index=False)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
numerical_cols = ['age','KPIs_met >80%','awards_won?','avg_training_score','previous_year_rating','length_of_service','age','no_of_trainings']
train_hr[numerical_cols] = scaler.fit_transform(train_hr[numerical_cols])
test_hr[numerical_cols] = scaler.transform(test_hr[numerical_cols])

from sklearn.model_selection import train_test_split

X = train_hr.drop('is_promoted', axis=1)
y = train_hr['is_promoted']
X_train_hr, X_test_hr, y_train_hr, y_test_hr = train_test_split(X, y, test_size=0.2, random_state=42)

train.head()

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

log_model = LogisticRegression()
log_model.fit(X_train_hr, y_train_hr)
y_pred = log_model.predict(X_test_hr)

# Evaluation
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_hr, y_train_hr)
y_pred_rf = rf_model.predict(X_test_hr)
accuracy_rf = accuracy_score(y_test_hr, y_pred_rf)
classification_report_rf = classification_report(y_test_hr, y_pred_rf)
confusion_matrix_rf = confusion_matrix(y_test_hr, y_pred_rf)
print("\nRandom Forest Classifier:")
print("Accuracy:", accuracy_rf)
print("Classification Report:\n", classification_report_rf)
print("Confusion Matrix:\n", confusion_matrix_rf)
print("\n")

xgb_model = XGBClassifier(random_state=42)
xgb_model.fit(X_train_hr, y_train_hr)
y_pred_xgb = xgb_model.predict(X_test_hr)
accuracy_xgb = accuracy_score(y_test_hr, y_pred_xgb)
classification_rep_xgb = classification_report(y_test_hr, y_pred_xgb)
confusion_mat_xgb = confusion_matrix(y_test_hr, y_pred_xgb)
print("\nXGBoost Classifier:")
print("Accuracy:", accuracy_xgb)
print("Classification Report:\n", classification_rep_xgb)
print("Confusion Matrix:\n", confusion_mat_xgb)

from sklearn.svm import SVC
from xgboost import XGBClassifier

svc_model = SVC(random_state=42)
svc_model.fit(X_train_hr, y_train_hr)
y_pred_svc = svc_model.predict(X_test_hr)
accuracy_svc = accuracy_score(y_test_hr, y_pred_svc)
classification_report_svc = classification_report(y_test_hr, y_pred_svc)
confusion_matrix_svc = confusion_matrix(y_test_hr, y_pred_svc)
print("\nSVC:")
print("Accuracy: ", accuracy_svc)
print("\nClassification Report: ", classification_report_svc)
print("\nConfusion Matrix: \n", confusion_matrix_svc)

original_test = pd.read_csv("test_hr.csv")

# Refit LabelEncoder to map back Loan_Status from numeric to original labels
label_encoder = LabelEncoder()
label_encoder.fit(pd.read_csv("train_hr.csv")["is_promoted"])

# Predict final labels
final_preds = xgb_model.predict(test_hr)
#print(np.unique(final_preds))




# Create submission DataFrame
submission = pd.DataFrame({
    'employee_id': original_test['employee_id'],
    'is_promoted': final_preds})
submission['is_promoted']=submission['is_promoted'].astype(int)

# Save submission to CSV
submission.to_csv("HR_submission.csv", index=False)
print("✅ Submission file 'HR_submission.csv' created successfully.")